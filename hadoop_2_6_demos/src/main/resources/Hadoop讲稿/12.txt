Hadoop 案例12----自连接问题

1、需求分析
实例中给出child-parent（孩子——父母）表，要求输出grandchild-grandparent（孙子——爷奶）表。
2、原始数据
file：



    child        parent

Tom        Lucy

Tom        Jack

Jone        Lucy

Jone        Jack

Lucy        Mary

Lucy        Ben

Jack        Alice

Jack        Jesse

Terry        Alice

Terry        Jesse

Philip        Terry

Philip        Alma

Mark        Terry

Mark        Alma




    样例输出如下所示。

    file：



    grandchild        grandparent

    Tom            　　Alice

    Tom            　　Jesse

    Jone            　　Alice

    Jone           　　 Jesse

    Tom            　　Mary

    Tom            　　Ben

    Jone           　　 Mary

    Jone           　　 Ben

    Philip          　　  Alice

    Philip            　　Jesse

    Mark           　　 Alice

    Mark           　　 Jesse


3、设计思路分析
	分析这个实例，显然需要进行单表连接，连接的是左表的parent列和右表的child列，且左表和右表是同一个表。

	连接结果中除去连接的两列就是所需要的结果——"grandchild--grandparent"表。要用MapReduce解决这个实例，
	首先应该考虑如何实现表的自连接；
	其次就是连接列的设置；
	最后是结果的整理。

        考虑到MapReduce的shuffle过程会将相同的key会连接在一起，所以可以将map结果的key设置成待连接的列，然后列中相同的值就自然会连接在一起了。
	再与最开始的分析联系起来：

	要连接的是左表的parent列和右表的child列，且左表和右表是同一个表，所以在map阶段将读入数据分割成child和parent之后，会将parent设置成key，
	child设置成value进行输出，并作为左表；再将同一对child和parent中的child设置成key，parent设置成value进行输出，作为右表。为了区分输出中的左右表，
	需要在输出的value中再加上左右表的信息，比如在value的String最开始处加上字符1表示左表，加上字符2表示右表。这样在map的结果中就形成了左表和右表，
	然后在shuffle过程中完成连接。reduce接收到连接的结果，其中每个key的value-list就包含了"grandchild--grandparent"关系。取出每个key的value-list进行解析，
	将左表中的child放入一个数组，右表中的parent放入一个数组，然后对两个数组求笛卡尔积就是最后的结果了。


4、编写map代码
	package com.wy.hadoop.selfralted;

	import java.io.IOException;
	import java.util.StringTokenizer;

	import org.apache.hadoop.io.Text;
	import org.apache.hadoop.mapreduce.Mapper;

	public class SelfMapper extends Mapper<Object, Text, Text, Text> {

		@Override
		protected void map(Object key, Text value,Context context)
				throws IOException, InterruptedException {
			String[] arr = new String[2];
			int i = 0;
			StringTokenizer stringTokenizer = new StringTokenizer(value.toString());
			while(stringTokenizer.hasMoreTokens()){
				arr[i]=stringTokenizer.nextToken();
				i++;
				if(i>=2){
					break;
				}
			}

			if(arr[0].compareTo("child")!=0){//not header
				context.write(new Text(arr[1]), new Text("1_"+arr[0]+"_"+arr[1]));
				context.write(new Text(arr[0]), new Text("2_"+arr[0]+"_"+arr[1]));
			}

		}


	}


5、编写reduce代码
	package com.wy.hadoop.selfralted;

	import java.io.IOException;
	import java.util.ArrayList;
	import java.util.Iterator;
	import java.util.List;
	import java.util.StringTokenizer;

	import org.apache.hadoop.io.NullWritable;
	import org.apache.hadoop.io.Text;
	import org.apache.hadoop.mapreduce.Reducer;


	public class SelfReducer extends Reducer<Text, Text, NullWritable, Text> {

		@Override
		protected void reduce(Text key, Iterable<Text> values,Context context)
				throws IOException, InterruptedException {
			Iterator<Text> iterator = values.iterator();
			List<String> grandChild = new ArrayList<String>();
			List<String> grandParent = new ArrayList<String>();

			while(iterator.hasNext()){
				String tmp = iterator.next().toString();
				String[] arr = tmp.split("_");

				if(arr[0].equals("1")){
					grandChild.add(arr[0]);
				}else if(arr[0].equals("2")){
					grandParent.add(arr[1]);
				}

			}
			if(grandChild.size()>0 && grandParent.size()>0){
				for(String gc:grandChild){
					for(String gp:grandParent){
						context.write(NullWritable.get(), new Text(gc+","+gp));
					}
				}
			}


		}


	}

6、编写Main Job

	package com.wy.hadoop.selfralted;

	import org.apache.hadoop.conf.Configuration;
	import org.apache.hadoop.fs.FileSystem;
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.io.NullWritable;
	import org.apache.hadoop.io.SequenceFile;
	import org.apache.hadoop.io.Text;
	import org.apache.hadoop.mapreduce.Job;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
	import org.apache.hadoop.util.Tool;
	import org.apache.hadoop.util.ToolRunner;

	import com.wy.hadoop.join.two.UserJob;

	public class SelfJob extends Configuration implements Tool, Runnable {

		private String inputPath = null;
		private String outputPath = null;

		public SelfJob(String inputPath,String outputPath){
			this.inputPath = inputPath;
			this.outputPath = outputPath;
		}
		public SelfJob(){}

		@Override
		public Configuration getConf() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public void setConf(Configuration arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void run() {
			try{
				String[] args = {this.inputPath,this.outputPath};

				start(args);

			}catch (Exception e) {
				e.printStackTrace();
			}

		}

		private void start(String[] args)throws Exception{

			ToolRunner.run(new UserJob(), args);
		}

		@Override
		public int run(String[] args) throws Exception {

			Configuration configuration = new Configuration();
			FileSystem fs = FileSystem.get(configuration);
			fs.delete(new Path(args[1]),true);

			Job job = new Job(configuration,"selfJob");
			job.setJarByClass(SelfJob.class);

			job.setMapperClass(SelfMapper.class);
			job.setReducerClass(SelfReducer.class);

			FileInputFormat.addInputPath(job, new Path(args[0]));
			FileOutputFormat.setOutputPath(job, new Path(args[1]));

			boolean success = job.waitForCompletion(true);

			Path path = new Path(args[1],"part-0000");
			SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, configuration);
			NullWritable key= NullWritable.get();
			Text val = new Text();
			while(reader.next(key, val)){
				System.out.println(key+"  "+val.toString());
			}

			return success?0:1;

		}

	}


	package com.wy.hadoop.selfralted;

	public class JobMain {

		/**
		 * @param args
		 */
		public static void main(String[] args) {
			if(args.length==2){
				new Thread(new SelfJob(args[0],args[1])).start();
			}

		}

	}

